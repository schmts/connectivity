steps:
# Step 1
- name: python
  id: install
  entrypoint: pip
  args: ["install", "-r", "requirements.txt", "--user"]
  dir: 'connectivity'
  
# Step 2
- name: python
  id: unit-test
  entrypoint: python
  args: ["-m", "pytest", "--junitxml=${SHORT_SHA}_test_log.xml"] 
  dir: 'connectivity'
  waitFor:
  - install

- name: python
  entrypoint: python
  args: ["-m", "pip", "install", "pycobertura"]
        
- name: python:3.7
  entrypoint: python3
  id: coverage-test
  args:
  - '-c'
  - 'import sys; from pycobertura import Cobertura, TextReporter; cobertura = Cobertura("functions/coverage.xml"); tr = TextReporter(cobertura); coverage = tr.generate().split(" ")[-1].strip("%"); print("Coverage OK:",coverage + "% > 90%") if float(coverage) > 90 else sys.exit("Coverage is less than 90%")'
  waitFor:
  - unit-test
  
- name: python:3.7
  entrypoint: python3
  id: linter-check
  args:
  - '-m'
  - 'flake8'
  - '--ignore=E501'
  - 'functions/'
  waitFor:
  - coverage-test
  
  
# Step 3
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: [
   '-c',
   'docker pull gcr.io/$PROJECT_ID/connectivity || exit 0'
  ]
  
# Step 4
- name: gcr.io/cloud-builders/docker
  args: [
   'build',
   '-t',
   'gcr.io/$PROJECT_ID/connectivity:$SHORT_SHA',
   '.'
  ]
  dir: 'connectivity'

# Step 5
- id: scan
  name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: /bin/bash
  args:
  - -c
  - |
    gcloud artifacts docker images scan gcr.io/$PROJECT_ID/connectivity:$SHORT_SHA \
    --format='value(response.scan)' > /workspace/scan_id.txt
# Step 6
- id: severity check
  name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: /bin/bash
  args:
  - -c
  - |
    gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
    --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq $_SEVERITY; \
    then echo 'Failed vulnerability check' && exit 1; else exit 0; fi
