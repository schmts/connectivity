steps:
# Step 0
- name: python
  entrypoint: pip
  args: ["install", "-r", "requirements.txt", "--user"]
  dir: 'connectivity'
# Step 1
- name: python
  entrypoint: python
  args: ["-m", "pytest", "--junitxml=${SHORT_SHA}_test_log.xml"] 
  dir: 'connectivity'
# Step 2
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: [
   '-c',
   'docker pull gcr.io/$PROJECT_ID/connectivity || exit 0'
  ]
# Step 2.5
- name: 'gcr.io/$PROJECT_ID/connectivity:$SHORT_SHA'
  id: &code_quality 'Run code quality checks'
  args:
    - '-c'
    - |
      ./gradlew -PdisablePreDex checkCode 2> check-logs.txt || echo "fail" > build-status.txt
      cat check-logs.txt
      if [[ "${_PUSH_TO_MASTER}" ]]; then
        ./gradlew -PdisablePreDex dependencyUpdates
      fi
  dir: 'connectivity'
  
# Step 3
- name: gcr.io/cloud-builders/docker
  args: [
   'build',
   '-t',
   'gcr.io/$PROJECT_ID/connectivity:$SHORT_SHA',
   '.'
  ]
  dir: 'connectivity'
# Step 4
- id: scan
  name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: /bin/bash
  args:
  - -c
  - |
    gcloud artifacts docker images scan gcr.io/$PROJECT_ID/connectivity:$SHORT_SHA \
    --format='value(response.scan)' > /workspace/scan_id.txt
# Step 5
- id: severity check
  name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: /bin/bash
  args:
  - -c
  - |
    gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
    --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq $_SEVERITY; \
    then echo 'Failed vulnerability check' && exit 1; else exit 0; fi
